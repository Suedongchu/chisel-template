;buildInfoPackage: chisel3, version: 3.2.2, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit FPAdd32 : 
  module FPAddStage1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<32>, flip b : UInt<32>, b_larger : UInt<1>, mant_shift : UInt<8>, exp : UInt<8>, manta : UInt<9>, mantb : UInt<9>, sign : UInt<1>, sub : UInt<1>}
    
    node _T = bits(io.a, 31, 31) @[FloatWrapper.scala 11:24]
    node _T_1 = bits(_T, 0, 0) @[FloatWrapper.scala 11:35]
    node _T_2 = bits(io.a, 30, 23) @[FloatWrapper.scala 12:24]
    node _T_3 = bits(io.a, 30, 23) @[FloatWrapper.scala 15:32]
    node _T_4 = eq(_T_3, UInt<1>("h00")) @[FloatWrapper.scala 15:41]
    node _T_5 = mux(_T_4, UInt<1>("h00"), UInt<1>("h01")) @[FloatWrapper.scala 15:28]
    node _T_6 = bits(io.a, 22, 0) @[FloatWrapper.scala 17:28]
    node _T_7 = cat(_T_5, _T_6) @[Cat.scala 29:58]
    node _T_8 = bits(io.a, 30, 0) @[FloatWrapper.scala 18:24]
    node _T_9 = eq(_T_8, UInt<1>("h00")) @[FloatWrapper.scala 18:32]
    node _T_10 = bits(io.b, 31, 31) @[FloatWrapper.scala 11:24]
    node _T_11 = bits(_T_10, 0, 0) @[FloatWrapper.scala 11:35]
    node _T_12 = bits(io.b, 30, 23) @[FloatWrapper.scala 12:24]
    node _T_13 = bits(io.b, 30, 23) @[FloatWrapper.scala 15:32]
    node _T_14 = eq(_T_13, UInt<1>("h00")) @[FloatWrapper.scala 15:41]
    node _T_15 = mux(_T_14, UInt<1>("h00"), UInt<1>("h01")) @[FloatWrapper.scala 15:28]
    node _T_16 = bits(io.b, 22, 0) @[FloatWrapper.scala 17:28]
    node _T_17 = cat(_T_15, _T_16) @[Cat.scala 29:58]
    node _T_18 = bits(io.b, 30, 0) @[FloatWrapper.scala 18:24]
    node _T_19 = eq(_T_18, UInt<1>("h00")) @[FloatWrapper.scala 18:32]
    node ext_exp_a = cat(UInt<1>("h00"), _T_2) @[Cat.scala 29:58]
    node ext_exp_b = cat(UInt<1>("h00"), _T_12) @[Cat.scala 29:58]
    node _T_20 = sub(ext_exp_a, ext_exp_b) @[FPAdd.scala 43:30]
    node exp_diff = tail(_T_20, 1) @[FPAdd.scala 43:30]
    reg reg_b_larger : UInt<1>, clock @[FPAdd.scala 45:27]
    reg reg_mant_shift : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[FPAdd.scala 46:33]
    reg reg_exp : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[FPAdd.scala 47:26]
    reg reg_manta : UInt, clock @[FPAdd.scala 48:28]
    reg_manta <= _T_7 @[FPAdd.scala 48:28]
    reg reg_mantb : UInt, clock @[FPAdd.scala 49:28]
    reg_mantb <= _T_17 @[FPAdd.scala 49:28]
    reg reg_sign : UInt<1>, clock @[FPAdd.scala 50:23]
    node _T_21 = xor(_T_1, _T_11) @[FPAdd.scala 51:39]
    reg reg_sub : UInt<1>, clock @[FPAdd.scala 51:26]
    reg_sub <= _T_21 @[FPAdd.scala 51:26]
    node _T_22 = bits(exp_diff, 8, 8) @[FPAdd.scala 58:19]
    node _T_23 = eq(_T_22, UInt<1>("h01")) @[FPAdd.scala 58:30]
    when _T_23 : @[FPAdd.scala 58:46]
      node _T_24 = bits(exp_diff, 7, 0) @[FPAdd.scala 60:36]
      node _T_25 = sub(UInt<1>("h00"), _T_24) @[FPAdd.scala 60:27]
      node _T_26 = tail(_T_25, 1) @[FPAdd.scala 60:27]
      reg_mant_shift <= _T_26 @[FPAdd.scala 60:24]
      reg_b_larger <= UInt<1>("h01") @[FPAdd.scala 62:22]
      reg_exp <= _T_12 @[FPAdd.scala 63:17]
      reg_sign <= _T_11 @[FPAdd.scala 64:18]
      skip @[FPAdd.scala 58:46]
    else : @[FPAdd.scala 65:18]
      node _T_27 = bits(exp_diff, 7, 0) @[FPAdd.scala 66:35]
      reg_mant_shift <= _T_27 @[FPAdd.scala 66:24]
      reg_b_larger <= UInt<1>("h00") @[FPAdd.scala 67:22]
      reg_exp <= _T_2 @[FPAdd.scala 68:17]
      reg_sign <= _T_1 @[FPAdd.scala 69:18]
      skip @[FPAdd.scala 65:18]
    io.mant_shift <= reg_mant_shift @[FPAdd.scala 72:19]
    io.b_larger <= reg_b_larger @[FPAdd.scala 73:17]
    io.exp <= reg_exp @[FPAdd.scala 74:12]
    io.manta <= reg_manta @[FPAdd.scala 75:14]
    io.mantb <= reg_mantb @[FPAdd.scala 76:14]
    io.sign <= reg_sign @[FPAdd.scala 77:13]
    io.sub <= reg_sub @[FPAdd.scala 78:12]
    
  module FPAddStage2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip manta_in : UInt<24>, flip mantb_in : UInt<24>, flip exp_in : UInt<8>, flip mant_shift : UInt<8>, flip b_larger : UInt<1>, flip sign_in : UInt<1>, flip sub_in : UInt<1>, manta_out : UInt<9>, mantb_out : UInt<9>, exp_out : UInt<8>, sign_out : UInt<1>, sub_out : UInt<1>}
    
    wire larger_mant : UInt<24> @[FPAdd.scala 103:27]
    wire smaller_mant : UInt<24> @[FPAdd.scala 104:28]
    when io.b_larger : @[FPAdd.scala 106:24]
      larger_mant <= io.mantb_in @[FPAdd.scala 107:21]
      smaller_mant <= io.manta_in @[FPAdd.scala 108:22]
      skip @[FPAdd.scala 106:24]
    else : @[FPAdd.scala 109:18]
      larger_mant <= io.manta_in @[FPAdd.scala 110:21]
      smaller_mant <= io.mantb_in @[FPAdd.scala 111:22]
      skip @[FPAdd.scala 109:18]
    node _T = gt(io.mant_shift, UInt<5>("h018")) @[FPAdd.scala 114:42]
    node _T_1 = dshr(smaller_mant, io.mant_shift) @[FPAdd.scala 115:53]
    node shifted_mant = mux(_T, UInt<1>("h00"), _T_1) @[FPAdd.scala 114:27]
    reg reg_manta : UInt, clock @[FPAdd.scala 116:28]
    reg_manta <= larger_mant @[FPAdd.scala 116:28]
    reg reg_mantb : UInt, clock @[FPAdd.scala 117:28]
    reg_mantb <= shifted_mant @[FPAdd.scala 117:28]
    reg reg_sign : UInt<1>, clock @[FPAdd.scala 118:27]
    reg_sign <= io.sign_in @[FPAdd.scala 118:27]
    reg reg_sub : UInt<1>, clock @[FPAdd.scala 119:26]
    reg_sub <= io.sub_in @[FPAdd.scala 119:26]
    reg reg_exp : UInt, clock @[FPAdd.scala 120:26]
    reg_exp <= io.exp_in @[FPAdd.scala 120:26]
    io.manta_out <= reg_manta @[FPAdd.scala 122:18]
    io.mantb_out <= reg_mantb @[FPAdd.scala 123:18]
    io.sign_out <= reg_sign @[FPAdd.scala 124:17]
    io.sub_out <= reg_sub @[FPAdd.scala 125:16]
    io.exp_out <= reg_exp @[FPAdd.scala 126:16]
    
  module FPAddStage3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip manta : UInt<24>, flip mantb : UInt<24>, flip exp_in : UInt<8>, flip sign_in : UInt<1>, flip sub : UInt<1>, mant_out : UInt<9>, sign_out : UInt<1>, exp_out : UInt<8>}
    
    node manta_ext = cat(UInt<1>("h00"), io.manta) @[Cat.scala 29:58]
    node mantb_ext = cat(UInt<1>("h00"), io.mantb) @[Cat.scala 29:58]
    node _T = sub(manta_ext, mantb_ext) @[FPAdd.scala 149:42]
    node _T_1 = tail(_T, 1) @[FPAdd.scala 149:42]
    node _T_2 = add(manta_ext, mantb_ext) @[FPAdd.scala 149:65]
    node _T_3 = tail(_T_2, 1) @[FPAdd.scala 149:65]
    node mant_sum = mux(io.sub, _T_1, _T_3) @[FPAdd.scala 149:23]
    reg reg_mant : UInt<24>, clock @[FPAdd.scala 152:23]
    reg reg_sign : UInt<1>, clock @[FPAdd.scala 153:23]
    reg reg_exp : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[FPAdd.scala 154:26]
    node _T_4 = bits(mant_sum, 24, 24) @[FPAdd.scala 158:19]
    node _T_5 = eq(_T_4, UInt<1>("h01")) @[FPAdd.scala 158:35]
    when _T_5 : @[FPAdd.scala 158:51]
      when io.sub : @[FPAdd.scala 159:23]
        node _T_6 = bits(mant_sum, 23, 0) @[FPAdd.scala 160:34]
        node _T_7 = sub(UInt<1>("h00"), _T_6) @[FPAdd.scala 160:25]
        node _T_8 = tail(_T_7, 1) @[FPAdd.scala 160:25]
        reg_mant <= _T_8 @[FPAdd.scala 160:22]
        node _T_9 = eq(io.sign_in, UInt<1>("h00")) @[FPAdd.scala 161:25]
        reg_sign <= _T_9 @[FPAdd.scala 161:22]
        reg_exp <= io.exp_in @[FPAdd.scala 162:21]
        skip @[FPAdd.scala 159:23]
      else : @[FPAdd.scala 163:22]
        node _T_10 = bits(mant_sum, 24, 1) @[FPAdd.scala 166:33]
        reg_mant <= _T_10 @[FPAdd.scala 166:22]
        node _T_11 = add(io.exp_in, UInt<1>("h01")) @[FPAdd.scala 167:34]
        node _T_12 = tail(_T_11, 1) @[FPAdd.scala 167:34]
        reg_exp <= _T_12 @[FPAdd.scala 167:21]
        reg_sign <= io.sign_in @[FPAdd.scala 168:22]
        skip @[FPAdd.scala 163:22]
      skip @[FPAdd.scala 158:51]
    else : @[FPAdd.scala 170:18]
      node _T_13 = bits(mant_sum, 23, 0) @[FPAdd.scala 171:29]
      reg_mant <= _T_13 @[FPAdd.scala 171:18]
      reg_sign <= io.sign_in @[FPAdd.scala 172:18]
      reg_exp <= io.exp_in @[FPAdd.scala 173:17]
      skip @[FPAdd.scala 170:18]
    io.sign_out <= reg_sign @[FPAdd.scala 176:17]
    io.exp_out <= reg_exp @[FPAdd.scala 177:16]
    io.mant_out <= reg_mant @[FPAdd.scala 178:17]
    
  module FPAddStage4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip exp_in : UInt<8>, flip mant_in : UInt<24>, exp_out : UInt<8>, mant_out : UInt<23>}
    
    node _T = bits(io.mant_in, 15, 0) @[Bitwise.scala 108:18]
    node _T_1 = shl(UInt<8>("h0ff"), 8) @[Bitwise.scala 101:47]
    node _T_2 = xor(UInt<16>("h0ffff"), _T_1) @[Bitwise.scala 101:21]
    node _T_3 = shr(_T, 8) @[Bitwise.scala 102:21]
    node _T_4 = and(_T_3, _T_2) @[Bitwise.scala 102:31]
    node _T_5 = bits(_T, 7, 0) @[Bitwise.scala 102:46]
    node _T_6 = shl(_T_5, 8) @[Bitwise.scala 102:65]
    node _T_7 = not(_T_2) @[Bitwise.scala 102:77]
    node _T_8 = and(_T_6, _T_7) @[Bitwise.scala 102:75]
    node _T_9 = or(_T_4, _T_8) @[Bitwise.scala 102:39]
    node _T_10 = bits(_T_2, 11, 0) @[Bitwise.scala 101:28]
    node _T_11 = shl(_T_10, 4) @[Bitwise.scala 101:47]
    node _T_12 = xor(_T_2, _T_11) @[Bitwise.scala 101:21]
    node _T_13 = shr(_T_9, 4) @[Bitwise.scala 102:21]
    node _T_14 = and(_T_13, _T_12) @[Bitwise.scala 102:31]
    node _T_15 = bits(_T_9, 11, 0) @[Bitwise.scala 102:46]
    node _T_16 = shl(_T_15, 4) @[Bitwise.scala 102:65]
    node _T_17 = not(_T_12) @[Bitwise.scala 102:77]
    node _T_18 = and(_T_16, _T_17) @[Bitwise.scala 102:75]
    node _T_19 = or(_T_14, _T_18) @[Bitwise.scala 102:39]
    node _T_20 = bits(_T_12, 13, 0) @[Bitwise.scala 101:28]
    node _T_21 = shl(_T_20, 2) @[Bitwise.scala 101:47]
    node _T_22 = xor(_T_12, _T_21) @[Bitwise.scala 101:21]
    node _T_23 = shr(_T_19, 2) @[Bitwise.scala 102:21]
    node _T_24 = and(_T_23, _T_22) @[Bitwise.scala 102:31]
    node _T_25 = bits(_T_19, 13, 0) @[Bitwise.scala 102:46]
    node _T_26 = shl(_T_25, 2) @[Bitwise.scala 102:65]
    node _T_27 = not(_T_22) @[Bitwise.scala 102:77]
    node _T_28 = and(_T_26, _T_27) @[Bitwise.scala 102:75]
    node _T_29 = or(_T_24, _T_28) @[Bitwise.scala 102:39]
    node _T_30 = bits(_T_22, 14, 0) @[Bitwise.scala 101:28]
    node _T_31 = shl(_T_30, 1) @[Bitwise.scala 101:47]
    node _T_32 = xor(_T_22, _T_31) @[Bitwise.scala 101:21]
    node _T_33 = shr(_T_29, 1) @[Bitwise.scala 102:21]
    node _T_34 = and(_T_33, _T_32) @[Bitwise.scala 102:31]
    node _T_35 = bits(_T_29, 14, 0) @[Bitwise.scala 102:46]
    node _T_36 = shl(_T_35, 1) @[Bitwise.scala 102:65]
    node _T_37 = not(_T_32) @[Bitwise.scala 102:77]
    node _T_38 = and(_T_36, _T_37) @[Bitwise.scala 102:75]
    node _T_39 = or(_T_34, _T_38) @[Bitwise.scala 102:39]
    node _T_40 = bits(io.mant_in, 23, 16) @[Bitwise.scala 108:44]
    node _T_41 = shl(UInt<4>("h0f"), 4) @[Bitwise.scala 101:47]
    node _T_42 = xor(UInt<8>("h0ff"), _T_41) @[Bitwise.scala 101:21]
    node _T_43 = shr(_T_40, 4) @[Bitwise.scala 102:21]
    node _T_44 = and(_T_43, _T_42) @[Bitwise.scala 102:31]
    node _T_45 = bits(_T_40, 3, 0) @[Bitwise.scala 102:46]
    node _T_46 = shl(_T_45, 4) @[Bitwise.scala 102:65]
    node _T_47 = not(_T_42) @[Bitwise.scala 102:77]
    node _T_48 = and(_T_46, _T_47) @[Bitwise.scala 102:75]
    node _T_49 = or(_T_44, _T_48) @[Bitwise.scala 102:39]
    node _T_50 = bits(_T_42, 5, 0) @[Bitwise.scala 101:28]
    node _T_51 = shl(_T_50, 2) @[Bitwise.scala 101:47]
    node _T_52 = xor(_T_42, _T_51) @[Bitwise.scala 101:21]
    node _T_53 = shr(_T_49, 2) @[Bitwise.scala 102:21]
    node _T_54 = and(_T_53, _T_52) @[Bitwise.scala 102:31]
    node _T_55 = bits(_T_49, 5, 0) @[Bitwise.scala 102:46]
    node _T_56 = shl(_T_55, 2) @[Bitwise.scala 102:65]
    node _T_57 = not(_T_52) @[Bitwise.scala 102:77]
    node _T_58 = and(_T_56, _T_57) @[Bitwise.scala 102:75]
    node _T_59 = or(_T_54, _T_58) @[Bitwise.scala 102:39]
    node _T_60 = bits(_T_52, 6, 0) @[Bitwise.scala 101:28]
    node _T_61 = shl(_T_60, 1) @[Bitwise.scala 101:47]
    node _T_62 = xor(_T_52, _T_61) @[Bitwise.scala 101:21]
    node _T_63 = shr(_T_59, 1) @[Bitwise.scala 102:21]
    node _T_64 = and(_T_63, _T_62) @[Bitwise.scala 102:31]
    node _T_65 = bits(_T_59, 6, 0) @[Bitwise.scala 102:46]
    node _T_66 = shl(_T_65, 1) @[Bitwise.scala 102:65]
    node _T_67 = not(_T_62) @[Bitwise.scala 102:77]
    node _T_68 = and(_T_66, _T_67) @[Bitwise.scala 102:75]
    node _T_69 = or(_T_64, _T_68) @[Bitwise.scala 102:39]
    node _T_70 = cat(_T_39, _T_69) @[Cat.scala 29:58]
    node _T_71 = bits(_T_70, 0, 0) @[OneHot.scala 47:40]
    node _T_72 = bits(_T_70, 1, 1) @[OneHot.scala 47:40]
    node _T_73 = bits(_T_70, 2, 2) @[OneHot.scala 47:40]
    node _T_74 = bits(_T_70, 3, 3) @[OneHot.scala 47:40]
    node _T_75 = bits(_T_70, 4, 4) @[OneHot.scala 47:40]
    node _T_76 = bits(_T_70, 5, 5) @[OneHot.scala 47:40]
    node _T_77 = bits(_T_70, 6, 6) @[OneHot.scala 47:40]
    node _T_78 = bits(_T_70, 7, 7) @[OneHot.scala 47:40]
    node _T_79 = bits(_T_70, 8, 8) @[OneHot.scala 47:40]
    node _T_80 = bits(_T_70, 9, 9) @[OneHot.scala 47:40]
    node _T_81 = bits(_T_70, 10, 10) @[OneHot.scala 47:40]
    node _T_82 = bits(_T_70, 11, 11) @[OneHot.scala 47:40]
    node _T_83 = bits(_T_70, 12, 12) @[OneHot.scala 47:40]
    node _T_84 = bits(_T_70, 13, 13) @[OneHot.scala 47:40]
    node _T_85 = bits(_T_70, 14, 14) @[OneHot.scala 47:40]
    node _T_86 = bits(_T_70, 15, 15) @[OneHot.scala 47:40]
    node _T_87 = bits(_T_70, 16, 16) @[OneHot.scala 47:40]
    node _T_88 = bits(_T_70, 17, 17) @[OneHot.scala 47:40]
    node _T_89 = bits(_T_70, 18, 18) @[OneHot.scala 47:40]
    node _T_90 = bits(_T_70, 19, 19) @[OneHot.scala 47:40]
    node _T_91 = bits(_T_70, 20, 20) @[OneHot.scala 47:40]
    node _T_92 = bits(_T_70, 21, 21) @[OneHot.scala 47:40]
    node _T_93 = bits(_T_70, 22, 22) @[OneHot.scala 47:40]
    node _T_94 = bits(_T_70, 23, 23) @[OneHot.scala 47:40]
    node _T_95 = mux(_T_93, UInt<5>("h016"), UInt<5>("h017")) @[Mux.scala 47:69]
    node _T_96 = mux(_T_92, UInt<5>("h015"), _T_95) @[Mux.scala 47:69]
    node _T_97 = mux(_T_91, UInt<5>("h014"), _T_96) @[Mux.scala 47:69]
    node _T_98 = mux(_T_90, UInt<5>("h013"), _T_97) @[Mux.scala 47:69]
    node _T_99 = mux(_T_89, UInt<5>("h012"), _T_98) @[Mux.scala 47:69]
    node _T_100 = mux(_T_88, UInt<5>("h011"), _T_99) @[Mux.scala 47:69]
    node _T_101 = mux(_T_87, UInt<5>("h010"), _T_100) @[Mux.scala 47:69]
    node _T_102 = mux(_T_86, UInt<4>("h0f"), _T_101) @[Mux.scala 47:69]
    node _T_103 = mux(_T_85, UInt<4>("h0e"), _T_102) @[Mux.scala 47:69]
    node _T_104 = mux(_T_84, UInt<4>("h0d"), _T_103) @[Mux.scala 47:69]
    node _T_105 = mux(_T_83, UInt<4>("h0c"), _T_104) @[Mux.scala 47:69]
    node _T_106 = mux(_T_82, UInt<4>("h0b"), _T_105) @[Mux.scala 47:69]
    node _T_107 = mux(_T_81, UInt<4>("h0a"), _T_106) @[Mux.scala 47:69]
    node _T_108 = mux(_T_80, UInt<4>("h09"), _T_107) @[Mux.scala 47:69]
    node _T_109 = mux(_T_79, UInt<4>("h08"), _T_108) @[Mux.scala 47:69]
    node _T_110 = mux(_T_78, UInt<3>("h07"), _T_109) @[Mux.scala 47:69]
    node _T_111 = mux(_T_77, UInt<3>("h06"), _T_110) @[Mux.scala 47:69]
    node _T_112 = mux(_T_76, UInt<3>("h05"), _T_111) @[Mux.scala 47:69]
    node _T_113 = mux(_T_75, UInt<3>("h04"), _T_112) @[Mux.scala 47:69]
    node _T_114 = mux(_T_74, UInt<2>("h03"), _T_113) @[Mux.scala 47:69]
    node _T_115 = mux(_T_73, UInt<2>("h02"), _T_114) @[Mux.scala 47:69]
    node _T_116 = mux(_T_72, UInt<1>("h01"), _T_115) @[Mux.scala 47:69]
    node norm_shift = mux(_T_71, UInt<1>("h00"), _T_116) @[Mux.scala 47:69]
    node _T_117 = eq(io.mant_in, UInt<1>("h00")) @[FPAdd.scala 198:22]
    when _T_117 : @[FPAdd.scala 198:38]
      io.mant_out <= UInt<1>("h00") @[FPAdd.scala 199:21]
      io.exp_out <= UInt<1>("h00") @[FPAdd.scala 200:20]
      skip @[FPAdd.scala 198:38]
    else : @[FPAdd.scala 201:18]
      node _T_118 = dshl(io.mant_in, norm_shift) @[FPAdd.scala 202:36]
      node _T_119 = bits(_T_118, 22, 0) @[FPAdd.scala 202:50]
      io.mant_out <= _T_119 @[FPAdd.scala 202:21]
      node _T_120 = sub(io.exp_in, norm_shift) @[FPAdd.scala 203:33]
      node _T_121 = tail(_T_120, 1) @[FPAdd.scala 203:33]
      io.exp_out <= _T_121 @[FPAdd.scala 203:20]
      skip @[FPAdd.scala 201:18]
    
  module FPAdd32 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<32>, flip b : UInt<32>, res : UInt<32>}
    
    inst stage1 of FPAddStage1 @[FPAdd.scala 216:24]
    stage1.clock <= clock
    stage1.reset <= reset
    stage1.io.a <= io.a @[FPAdd.scala 218:17]
    stage1.io.b <= io.b @[FPAdd.scala 219:17]
    inst stage2 of FPAddStage2 @[FPAdd.scala 221:24]
    stage2.clock <= clock
    stage2.reset <= reset
    stage2.io.manta_in <= stage1.io.manta @[FPAdd.scala 223:24]
    stage2.io.mantb_in <= stage1.io.mantb @[FPAdd.scala 224:24]
    stage2.io.exp_in <= stage1.io.exp @[FPAdd.scala 225:22]
    stage2.io.sign_in <= stage1.io.sign @[FPAdd.scala 226:23]
    stage2.io.sub_in <= stage1.io.sub @[FPAdd.scala 227:22]
    stage2.io.b_larger <= stage1.io.b_larger @[FPAdd.scala 228:24]
    stage2.io.mant_shift <= stage1.io.mant_shift @[FPAdd.scala 229:26]
    inst stage3 of FPAddStage3 @[FPAdd.scala 231:24]
    stage3.clock <= clock
    stage3.reset <= reset
    stage3.io.manta <= stage2.io.manta_out @[FPAdd.scala 233:21]
    stage3.io.mantb <= stage2.io.mantb_out @[FPAdd.scala 234:21]
    stage3.io.exp_in <= stage2.io.exp_out @[FPAdd.scala 235:22]
    stage3.io.sign_in <= stage2.io.sign_out @[FPAdd.scala 236:23]
    stage3.io.sub <= stage2.io.sub_out @[FPAdd.scala 237:19]
    inst stage4 of FPAddStage4 @[FPAdd.scala 239:24]
    stage4.clock <= clock
    stage4.reset <= reset
    stage4.io.exp_in <= stage3.io.exp_out @[FPAdd.scala 241:22]
    stage4.io.mant_in <= stage3.io.mant_out @[FPAdd.scala 242:23]
    node _T = cat(stage3.io.sign_out, stage4.io.exp_out) @[Cat.scala 29:58]
    node _T_1 = cat(_T, stage4.io.mant_out) @[Cat.scala 29:58]
    io.res <= _T_1 @[FPAdd.scala 244:12]
    
